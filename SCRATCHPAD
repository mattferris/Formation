<?php

FormEvents::registerHandler('ValidationFailed', array($handler, 'onValidationFailed'));
FormEvents::delegate(array('DomainEvents', 'raise'));

$form = new Form('login', $httpRequest);
$form->add(new Text('username', new RegexValidator('^[a-zA-Z0-9_]+$')));
$form->add(new Password('password'));

if ($form->isPostBack())
{
    $username = $form->getField('username')->getValue();
    $password = $form->getField('password')->getValue();
}

?>

<html>
<body>

<form method="post">
    <input type="hidden" name="__id" value="<?php echo $form->getId(); ?>" />
    <lable for="username">Username</label>
    <input type="text" name="username" />
</form>

</body>
</html>

--

When loaded, the Form object checks the passed $httpRequest object for a '__id' parameter. If found, it checks the value to determine if it matches it's own ID. If the ID matches, then it parses the input and populates the attached field objects.

Field objects can be instantiated with an optional validation object. If validation fails, the validation object will raise a ValidationFailed event. Events are aggregated by the static FormEvents class. Handlers can be registered via FormEvents::registerHandler().

The FormEvents event aggregator can delegate all event handling to another function/object/class via FormEvents::delegate();
